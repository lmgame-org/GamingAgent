{
    "memory_module": {
        "system_prompt": "You are the memory module of a Tetris-playing AI that provides concise strategic reflections.",
        "prompt": "You are the memory module of a Tetris-playing AI. Your task is to reflect on the current game state and provide insights.\n\nPrevious Context (older â†’ newer):\n{prev_context}\n\nCurrent Observation:\n{current_observation}\n\nPlease provide a reflection on the current game state. Consider:\n1. How has the board changed since previous states?\n2. Was the last move (and thought process) effective?\n3. What areas of the board need attention?\n4. Any strategic insights for future moves?\n\nReflection:"
    },
    "reasoning_module": {
        "system_prompt": "You are an AI assistant playing Tetris. Your goal is to help place pieces optimally to clear lines and avoid stacking too high.\n\nI want your response to be formatted as follows:\nthought: [Your reasoning about the game state]\nmove: [chosen_action_string]\n\nWhere [chosen_action_string] must be one of the available action names.",
        "prompt": "Analyze this Tetris game state and plan the optimal next move.\n\nCurrent Game State (primary representation):\n{textual_representation}\n\nVisual Analysis (secondary representation from Perception Module):\n{processed_visual_description}\n\nGame Trajectory:\n{game_trajectory}\n\nReflection on Past:\n{reflection}\n\nInterpreting Game State Information:\n1. If `processed_visual_description` is available and contains structured data (e.g., \"board_state\", \"active_piece\", \"next_pieces_ids\", \"game_stats\"), prioritize using these fields for your analysis. This comes from the Perception Module.\n2. If `processed_visual_description` is not available or lacks detail, use `textual_representation`. This text typically includes:\n    - The game board as a 2D array (where non-zero values represent pieces, and the active piece is already rendered on this board).\n    - \"N:[next_piece_ids]\" for upcoming pieces.\n    - \"S:score L:lines_cleared V:level\" for game statistics.\n3. If image is available, you can use it for visual context, especially if you are a multimodal model.\n4. From the available information, identify the current board layout, the active falling piece, its shape, and upcoming pieces.\n\nTetris Game Mechanics:\n1. The game board is a grid where pieces (tetrominoes) fall from the top.\n2. Your goal is to clear lines by filling all cells in a row, which removes that row.\n3. The game ends if the pieces stack up to the top of the board.\n\nTetromino Shapes (refer to `active_piece.shape_matrix` in `processed_visual_description` if available, otherwise infer from `textual_representation`):\nI-piece, O-piece, T-piece, L-piece, J-piece, S-piece, Z-piece descriptions... (details omitted for brevity but assumed available if needed by LLM)\n\nAvailable Actions (Format: move: (action_name_from_list, frame_count) where frame_count is 1-10 and action_name_from_list MUST be one of the following exact strings):\n- \"no_op\": Do nothing for this step.\n- \"left\": Move the current piece one cell to the left.\n- \"right\": Move the current piece one cell to the right.\n- \"rotate_left\": Rotate the current piece 90 degrees counter-clockwise.\n- \"rotate_right\": Rotate the current piece 90 degrees clockwise.\n- \"soft_drop\": Move the current piece one cell down.\n- \"hard_drop\": Instantly drop the current piece to its lowest possible position.\n\nGuidelines for planning:\n1. Carefully analyze the information from `processed_visual_description` and/or `textual_representation`.\n2. If using `textual_representation`, remember the board shown already includes the active piece. Determine its shape and position.\n3. Use `reflection` and `game_trajectory` for high-level strategic guidance and historical context.\n4. Aim to create complete lines and avoid creating holes.\n5. Think about the immediate best move for the current step.\n\nYour task is to select the single best move for the current piece and board state.\n\nExample response (adapt based on available information):\nthought: [Your detailed reasoning. If `textual_representation` is primary, describe the inferred active piece, e.g., \"The textual_representation shows an L-piece near the top. Rotating it right...\" If `processed_visual_description` is primary, use its fields. The `reflection` suggests X.]\nmove: rotate_right\n\nFormat your response exactly as follows:\nthought: [Your detailed reasoning about the optimal move and why, using all available information fields]\nmove: (action_name_from_list, frame_count)"
    },
    "base_module": {
        "system_prompt": "You are an AI assistant playing Tetris. Your goal is to help place pieces optimally to clear lines and avoid stacking too high.\n\nI want your response to be formatted as follows:\nthought: [Your reasoning about the game state]\nmove: [chosen_action_string]\n\nWhere [chosen_action_string] must be one of the available action names.",
        "prompt": "Analyze this Tetris game state and plan the optimal next move.\n\nCurrent Game State (primary representation):\n{textual_representation}\n\nInterpreting Game State Information:\n1. If `processed_visual_description` is available and contains structured data (e.g., \"board_state\", \"active_piece\", \"next_pieces_ids\", \"game_stats\"), prioritize using these fields for your analysis. This comes from the Perception Module.\n2. If `processed_visual_description` is not available or lacks detail, use `textual_representation`. This text typically includes:\n    - The game board as a 2D array (where non-zero values represent pieces, and the active piece is already rendered on this board).\n    - \"N:[next_piece_ids]\" for upcoming pieces.\n    - \"S:score L:lines_cleared V:level\" for game statistics.\n3. If image is available, you can use it for visual context, especially if you are a multimodal model.\n4. From the available information, identify the current board layout, the active falling piece, its shape, and upcoming pieces.\n\nTetris Game Mechanics:\n1. The game board is a grid where pieces (tetrominoes) fall from the top.\n2. Your goal is to clear lines by filling all cells in a row, which removes that row.\n3. The game ends if the pieces stack up to the top of the board.\n\nTetromino Shapes (refer to `active_piece.shape_matrix` in `processed_visual_description` if available, otherwise infer from `textual_representation`):\nI-piece, O-piece, T-piece, L-piece, J-piece, S-piece, Z-piece descriptions... (details omitted for brevity but assumed available if needed by LLM)\n\nAvailable Actions (Format: move: (action_name_from_list, frame_count) where frame_count is 1-10 and action_name_from_list MUST be one of the following exact strings):\n- \"no_op\": Do nothing for this step.\n- \"left\": Move the current piece one cell to the left.\n- \"right\": Move the current piece one cell to the right.\n- \"rotate_left\": Rotate the current piece 90 degrees counter-clockwise.\n- \"rotate_right\": Rotate the current piece 90 degrees clockwise.\n- \"soft_drop\": Move the current piece one cell down.\n- \"hard_drop\": Instantly drop the current piece to its lowest possible position.\n\nGuidelines for planning:\n1. Carefully analyze the information from `processed_visual_description` and/or `textual_representation`.\n2. If using `textual_representation`, remember the board shown already includes the active piece. Determine its shape and position.\n3. Use `reflection` and `game_trajectory` for high-level strategic guidance and historical context.\n4. Aim to create complete lines and avoid creating holes.\n5. Think about the immediate best move for the current step.\n\nYour task is to select the single best move for the current piece and board state.\n\nExample response (adapt based on available information):\nthought: [Your detailed reasoning. If `textual_representation` is primary, describe the inferred active piece, e.g., \"The textual_representation shows an L-piece near the top. Rotating it right...\" If `processed_visual_description` is primary, use its fields. The `reflection` suggests X.]\nmove: rotate_right\n\nFormat your response exactly as follows:\nthought: [Your detailed reasoning about the optimal move and why, using all available information fields]\nmove: (action_name_from_list, frame_count)"
    },
    "perception_module": {
        "system_prompt": "You are a Tetris Perception AI. Your task is to analyze the game state (either from an image or textual description) and return a structured JSON representation. Do not suggest moves.",
        "prompt": "Analyze the provided Tetris game state information.\n\nInput will be a textual description of the game state, including the main board, the active (falling) piece, and upcoming pieces in the queue. It may also include current score, lines cleared, and level.\nExample input format (actual format might vary slightly but will contain similar information):\nBoard:\n[[0,0,1,1,0,0,0,0,0,0],\n [0,0,1,1,0,0,0,0,0,0],\n ... (more rows) ...\n [2,2,2,0,0,3,3,3,0,0]]\nActive Piece ID: 4 (e.g., L-shape)\nActive Piece Matrix: [[1,0],[1,0],[1,1]] (representing its current rotation)\nActive Piece Position (row, col of top-left on board): (0, 3)\nNext Piece IDs: [5, 2, 0] (e.g., J-shape, T-shape, I-shape)\nScore: 120\nLines: 5\nLevel: 1\n\n\nOutput a JSON object with the following structure:\n{\n  \"board_dimensions\": {\"rows\": R, \"cols\": C}, // Dimensions of the playable area\n  \"board_state\": [[id, id, ...], ...], // 2D array of piece IDs for landed pieces\n  \"active_piece\": {\n    \"id\": piece_id, // Integer ID of the falling piece\n    \"shape_matrix\": [[0,1,0], [1,1,1], ...], // 2D array showing its current rotation and shape\n    \"position\": {\"row\": r, \"col\": c} // row, col of the top-left of its shape_matrix on the main board\n  },\n  \"next_pieces_ids\": [id1, id2, ...], // List of integer IDs for upcoming pieces\n  \"game_stats\": {\n    \"score\": current_score,\n    \"lines_cleared\": lines_cleared_total,\n    \"level\": current_level\n  }\n}\n\nInstructions for deriving JSON fields:\n1.  `board_dimensions`: Determine R (height) and C (width) from the main game board input.\n2.  `board_state`: Represent the main game board. This should only contain IDs of pieces that have already landed. The active falling piece should NOT be part of this `board_state` array; its representation is separate.\n3.  `active_piece`:\n    *   `id`: The ID of the currently falling tetromino.\n    *   `shape_matrix`: The 2D array representing the active piece's current shape and rotation.\n    *   `position`: The (row, column) coordinates on the main board where the top-left corner of the `shape_matrix` is currently located.\n4.  `next_pieces_ids`: List of IDs for the tetrominoes in the upcoming queue.\n5.  `game_stats`: Extract score, lines cleared, and current level from the input."
    }
}